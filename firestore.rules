rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - store user profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }
    
    // Workspaces collection
    match /workspaces/{workspaceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.owner_id == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.owner_id == request.auth.uid || 
         request.auth.uid in resource.data.get('members', []));
      allow delete: if isAuthenticated() && 
        resource.data.owner_id == request.auth.uid;
    }
    
    // Workspace members collection
    match /workspace_members/{memberId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Tasks collection
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.created_by == request.auth.uid;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        resource.data.created_by == request.auth.uid;
    }
    
    // Messages/Chat collection
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
    }
    
    // Goals/Objectives collection
    match /goals/{goalId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.created_by == request.auth.uid;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        resource.data.created_by == request.auth.uid;
    }
    
    // Key Results collection
    match /key_results/{krId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Comments collection
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
    }
    
    // Meetings collection
    match /meetings/{meetingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.organizer_id == request.auth.uid;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        resource.data.organizer_id == request.auth.uid;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow create: if false; // Only server/functions can create
      allow update: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['is_read']);
      allow delete: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
    }
    
    // AI usage tracking (read-only for users)
    match /ai_usage/{usageId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow write: if false; // Only server/functions can write
    }
    
    // Activity logs (read-only for users)
    match /activity_logs/{logId} {
      allow read: if isAuthenticated() && 
        resource.data.user_id == request.auth.uid;
      allow write: if false; // Only server/functions can write
    }
    
    // Channels collection
    match /channels/{channelId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.created_by == request.auth.uid;
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        resource.data.created_by == request.auth.uid;
    }
    
    // API Usage tracking (write-only for authenticated users, read for admin)
    match /api_usage/{usageId} {
      allow read: if false; // Only backend/admin should read
      allow create: if isAuthenticated() && 
        request.resource.data.user_id == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
    
    // API Usage Daily Aggregates
    match /api_usage_daily/{aggregateId} {
      allow read: if false; // Only backend/admin should read
      allow write: if false; // Only backend should write
    }
    
    // API Usage Monthly Aggregates
    match /api_usage_monthly/{aggregateId} {
      allow read: if false; // Only backend/admin should read
      allow write: if false; // Only backend should write
    }
    
    // Workspace join requests
    match /workspace_join_requests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // Workspace invitations
    match /workspace_invitations/{invitationId} {
      allow read: if true; // Anyone with the link can read
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // Workspace storage tracking
    match /workspaceStorage/{workspaceId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Objectives collection
    match /objectives/{objectiveId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Activities collection
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // General catch-all for any subcollections
    match /{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated(); // Allow writes for authenticated users temporarily
    }
  }
}