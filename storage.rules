rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Allow read/write for authenticated users in their workspace
    // In production, you might want to check workspace membership in Firestore
    match /workspaces/{workspaceId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.resource.size < 50 * 1024 * 1024; // 50MB limit
      allow delete: if isAuthenticated();
    }
    
    // Allow read/write for user avatars
    match /avatars/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && request.resource.size < 5 * 1024 * 1024; // 5MB limit for avatars
      allow delete: if isOwner(userId);
    }
    
    // Allow read for public files
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated() && request.resource.size < 10 * 1024 * 1024; // 10MB limit for public files
      allow delete: if false; // Prevent deletion of public files
    }
    
    // Allow read/write for chat attachments
    match /chat-attachments/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.resource.size < 100 * 1024 * 1024; // 100MB limit for attachments
      allow delete: if isAuthenticated();
    }
    
    // Allow test-cors for testing purposes
    match /test-cors/{allPaths=**} {
      allow read: if true;
      allow write: if true;
      allow delete: if true;
    }
  }
}